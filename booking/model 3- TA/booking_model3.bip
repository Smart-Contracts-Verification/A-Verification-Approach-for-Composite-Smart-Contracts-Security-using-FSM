model booking

	port type syncPort
	
 connector type SINGLE(syncPort p)
    define p
end


atomic type TravelAgency
	
	data int counter=1	
	data int Total_Price=5
	data int i = 0
	data int j= 0
	data int k= 0
	data int Flight_Price0= 2
	data int Flight_Price=0
	data int Flight_status= 1
	data int Pmin= 0
	data int id=1
	data int idInput=1 

	
export port syncPort createFlights
export port syncPort c1
export port syncPort c2counterPlus1
export port syncPort c3

export port syncPort SearchflightPRICE
export port syncPort s1
export port syncPort s2
export port syncPort s3
export port syncPort s4
export port syncPort s5
export port syncPort s6
export port syncPort s7
export port syncPort s8
export port syncPort s9
export port syncPort s10
export port syncPort s11
export port syncPort s12
export port syncPort s13
export port syncPort s14
export port syncPort s15
export port syncPort s16
export port syncPort s17
export port syncPort s18
export port syncPort s19
export port syncPort s20
export port syncPort s21

export port syncPort getFlightbyID
export port syncPort g1
export port syncPort g2
export port syncPort g3
export port syncPort g4
export port syncPort g5
export port syncPort g6
export port syncPort g7
export port syncPort g8
export port syncPort g9
export port syncPort g10
export port syncPort g11
export port syncPort g12
export port syncPort g13
export port syncPort g14

export port syncPort BookFLIGHT
export port syncPort b1
export port syncPort b2
export port syncPort b3
export port syncPort b4
export port syncPort b5
export port syncPort b6
export port syncPort b7
export port syncPort b8
export port syncPort b9
export port syncPort b10
export port syncPort b11
export port syncPort b12
export port syncPort b13
export port syncPort b14


  place  invoke, functioncreateFlights, AddFlight, addition, functionSearchflightPRICE, requirecondition, PriceAccepted, PriceRejected, initialPminFlights, loop, loopcondition, loopincrement, ifcondition, filghtFound, flightNotFound, setPminflight, Price_GT_Pmin, Else, revert, return, functiongetFlightbyID, IdAccepted, IdRejected, IdFound, IdNotFound, functionBookFLIGHT, IdA, IdR, IdF, IdNotF, flightbooked
		 
initial to invoke

on createFlights from invoke to functioncreateFlights
on c1 from functioncreateFlights to  AddFlight
on c2counterPlus1 from AddFlight to addition do { counter = counter + 1; }
on c3 from addition to invoke

on SearchflightPRICE from invoke to functionSearchflightPRICE
on s1 from functionSearchflightPRICE to requirecondition
on s2 from requirecondition to PriceAccepted provided ( Total_Price > 0)
on s3 from requirecondition to PriceRejected provided (Total_Price <= 0)
on s5 from PriceRejected to invoke
on s4 from PriceAccepted to initialPminFlights do {Pmin = Flight_Price0;}
on s6 from initialPminFlights to loop 
on s7 from loop to loopcondition provided (i<= counter)
on s8 from loopcondition to ifcondition
on s9 from ifcondition to filghtFound provided (Flight_Price <= Pmin)
on s10 from ifcondition to flightNotFound provided (Flight_Price > Pmin)
on s11 from filghtFound to setPminflight do { Pmin = Flight_Price;}
on s12 from flightNotFound to loopincrement do {i = i + 1;}
on s13 from loopincrement to loop
on s14 from setPminflight to ifcondition
on s15 from ifcondition to Price_GT_Pmin provided ( Total_Price >= Pmin)
on s16 from ifcondition to Else provided (Total_Price < Pmin)
on s17 from Price_GT_Pmin to return 
on s18 from return to invoke
on s19 from Else to revert
on s20 from revert to invoke
on s21 from loop to invoke provided (i > counter)

on getFlightbyID from invoke to functiongetFlightbyID
on g1 from functiongetFlightbyID to requirecondition
on g2 from requirecondition to IdAccepted provided (id >0)
on g3 from requirecondition to IdRejected provided (id<= 0)
on g4 from IdRejected to invoke
on g5 from IdAccepted to loop 
on g6 from loop to loopcondition provided ( j <= counter)
on g7 from loopcondition to ifcondition
on g8 from ifcondition to IdFound provided (idInput == id)
on g9 from ifcondition to IdNotFound provided (idInput != id)
on g10 from IdNotFound to loopincrement do {j = j + 1;}
on g11 from loopincrement to loop 
on g12 from IdFound to return
on g13 from return to invoke
on g14 from loop to invoke provided  (j > counter)

on BookFLIGHT from invoke to functionBookFLIGHT
on b1 from functionBookFLIGHT to requirecondition
on b2 from requirecondition to IdA provided (id >0)
on b3 from requirecondition to IdR provided (id<= 0)
on b4 from IdR to invoke
on b5 from IdA to loop 
on b6 from loop to loopcondition provided ( k <= counter)
on b7 from loopcondition to ifcondition
on b8 from ifcondition to IdF provided (idInput == id && Flight_status == 1)
on b9 from ifcondition to IdNotF provided (idInput != id || Flight_status != 1)
on b10 from IdNotF to loopincrement do {k = k + 1;}
on b11 from loopincrement to loop 
on b12 from IdF to flightbooked do {Flight_status = 0;}
on b13 from flightbooked to invoke
on b14 from loop to invoke provided (k > counter)




end

compound type globModel

  component TravelAgency  BAUC

connector SINGLE BAUC_createFlights( BAUC.createFlights)
connector SINGLE BAUC_c1( BAUC.c1)
connector SINGLE BAUC_c2counterPlus1( BAUC.c2counterPlus1)
connector SINGLE BAUC_c3 ( BAUC.c3)


connector SINGLE BAUC_SearchflightPRICE( BAUC.SearchflightPRICE)
connector SINGLE BAUC_s1( BAUC.s1)
connector SINGLE BAUC_s2( BAUC.s2)
connector SINGLE BAUC_s3( BAUC.s3)
connector SINGLE BAUC_s4( BAUC.s4)
connector SINGLE BAUC_s5( BAUC.s5)
connector SINGLE BAUC_s6( BAUC.s6)
connector SINGLE BAUC_s7( BAUC.s7)
connector SINGLE BAUC_s8( BAUC.s8)
connector SINGLE BAUC_s9( BAUC.s9)
connector SINGLE BAUC_s10( BAUC.s10)
connector SINGLE BAUC_s11( BAUC.s11)
connector SINGLE BAUC_s12( BAUC.s12)
connector SINGLE BAUC_s13( BAUC.s13)
connector SINGLE BAUC_s14( BAUC.s14)
connector SINGLE BAUC_s15( BAUC.s15)
connector SINGLE BAUC_s16( BAUC.s16)
connector SINGLE BAUC_s17( BAUC.s17)
connector SINGLE BAUC_s18( BAUC.s18)
connector SINGLE BAUC_s19( BAUC.s19)
connector SINGLE BAUC_s20( BAUC.s20)
connector SINGLE BAUC_s21( BAUC.s21)


connector SINGLE BAUC_getFlightbyID( BAUC.getFlightbyID)
connector SINGLE BAUC_g1( BAUC.g1)
connector SINGLE BAUC_g2( BAUC.g2)
connector SINGLE BAUC_g3( BAUC.g3)
connector SINGLE BAUC_g4( BAUC.g4)
connector SINGLE BAUC_g5( BAUC.g5)
connector SINGLE BAUC_g6( BAUC.g6)
connector SINGLE BAUC_g7( BAUC.g7)
connector SINGLE BAUC_g8( BAUC.g8)
connector SINGLE BAUC_g9( BAUC.g9)
connector SINGLE BAUC_g10( BAUC.g10)
connector SINGLE BAUC_g11( BAUC.g11)
connector SINGLE BAUC_g12( BAUC.g12)
connector SINGLE BAUC_g13( BAUC.g13)
connector SINGLE BAUC_g14( BAUC.g14)

connector SINGLE BAUC_BookFLIGHT( BAUC.BookFLIGHT)
connector SINGLE BAUC_b1( BAUC.b1)
connector SINGLE BAUC_b2( BAUC.b2)
connector SINGLE BAUC_b3( BAUC.b3)
connector SINGLE BAUC_b4( BAUC.b4)
connector SINGLE BAUC_b5( BAUC.b5)
connector SINGLE BAUC_b6( BAUC.b6)
connector SINGLE BAUC_b7( BAUC.b7)
connector SINGLE BAUC_b8( BAUC.b8)
connector SINGLE BAUC_b9( BAUC.b9)
connector SINGLE BAUC_b10( BAUC.b10)
connector SINGLE BAUC_b11( BAUC.b11)
connector SINGLE BAUC_b12( BAUC.b12)
connector SINGLE BAUC_b13( BAUC.b13)
connector SINGLE BAUC_b14( BAUC.b14)

end

component globModel Root
 end