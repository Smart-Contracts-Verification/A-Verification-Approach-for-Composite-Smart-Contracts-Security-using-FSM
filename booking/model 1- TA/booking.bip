model booking

	port type syncPort
	
 connector type SINGLE(syncPort p)
    define p
end


atomic type TravelAgency
	
	data int counter	
	data int Total_Price
	data int i
	data int j
	data int k
	data int Flight_Price
	data int Flight_status 
	data int Pmin
	data int id
	data int idF
	data int FLIGHT_FOUND 
	
export port syncPort createFlights
export port syncPort addFlight
export port syncPort additionCounterOne
export port syncPort finishcreateFlights
export port syncPort SearchflightPRICE
export port syncPort guardSearchflightPRICE
export port syncPort DguardSearchflightPRICE
export port syncPort startloopS
export port syncPort loopconditionS
export port syncPort DstartloopS
export port syncPort ifconditionS
export port syncPort DifconditionS
export port syncPort loopincreS
export port syncPort backtoloopS
export port syncPort ifconditionS1
export port syncPort DifconditionS1
export port syncPort RETURN
export port syncPort getFlightbyID
export port syncPort guardfunctiongetFlightbyID
export port syncPort DguardfunctiongetFlightbyID
export port syncPort startloopG
export port syncPort DstartloopG
export port syncPort ifconditionG
export port syncPort DifconditionG
export port syncPort loopincreG
export port syncPort backtoloopG
export port syncPort BookFLIGHT
export port syncPort guardBookFLIGHT
export port syncPort DguardBookFLIGHT
export port syncPort loopconditionB 
export port syncPort DloopconditionB
export port syncPort ifconditionB
export port syncPort DifconditionB
export port syncPort loopincreB
export port syncPort backtoloopB



  place  invoke, functioncreateFlights, AddFlight, addition, functionSearchflightPRICE, VAR_S, VAR2_S, loop_S, loopcondition_S, loopincre_S, return_S, functiongetFlightbyID, VAR_G, Loopincre_G, loop_G, Loopcondition_G, functionBookFLIGHT, VAR_B, Loopincre_B, loop_B, Loopcondition_B 

initial to invoke

on createFlights from invoke to functioncreateFlights
on addFlight from functioncreateFlights to AddFlight
on additionCounterOne from AddFlight to addition do {counter= counter + 1;}
on finishcreateFlights from addition to invoke
on SearchflightPRICE from invoke to functionSearchflightPRICE
on guardSearchflightPRICE from functionSearchflightPRICE to VAR_S provided (Total_Price > 0) do { Pmin = 0;}
on DguardSearchflightPRICE from functionSearchflightPRICE to invoke provided (Total_Price <= 0)
on startloopS from VAR_S to loop_S
on loopconditionS from loop_S to loopcondition_S provided (i <= counter)
on DstartloopS from loop_S to invoke provided (i > counter)
on ifconditionS from loopcondition_S to VAR2_S  provided( Flight_Price < Pmin && Flight_status == 1) do { Pmin = Flight_Price;}
on loopincreS from VAR2_S to loopincre_S  do {i= i + 1;}
on DifconditionS from loopcondition_S to loopincre_S  provided( Flight_Price > Pmin || Flight_status != 1)  do {i= i + 1;}
on backtoloopS from loopincre_S to loop_S
on ifconditionS1 from  loop_S to return_S  provided (Total_Price>= Pmin)
on DifconditionS1 from  loop_S to invoke provided (Total_Price < Pmin)
on RETURN from return_S to invoke
on getFlightbyID from invoke to functiongetFlightbyID
on guardfunctiongetFlightbyID from  functiongetFlightbyID to loop_G provided (id >0)
on DguardfunctiongetFlightbyID from  functiongetFlightbyID to invoke  provided (id <=0)
on startloopG from loop_G to Loopcondition_G provided (j <= counter)
on DstartloopG from loop_G to invoke provided (j > counter)
on ifconditionG from Loopcondition_G to VAR_G provided (idF == id) do { FLIGHT_FOUND = 1; }
on loopincreG from  VAR_G to Loopincre_G do {j = j + 1;}
on DifconditionG from Loopcondition_G  to Loopincre_G provided (idF != id) do {j = j + 1;}
on backtoloopG from  Loopincre_G to loop_G 
on BookFLIGHT from invoke to functionBookFLIGHT
on guardBookFLIGHT from functionBookFLIGHT to loop_B provided(id > 0 )
on DguardBookFLIGHT from functionBookFLIGHT to invoke provided(id <= 0 )
on loopconditionB from loop_B to Loopcondition_B provided (k <= counter)
on DloopconditionB from loop_B to invoke provided (k > counter)
on ifconditionB from Loopcondition_B to VAR_B provided ( idF == id && Flight_status == 1 ) do {Flight_status = 0;}
on loopincreB from VAR_B to Loopincre_B do {k = k + 1 ;}
on DifconditionB from Loopcondition_B to Loopincre_B provided ( idF != id || Flight_status != 1 ) do {k = k + 1 ;}
on backtoloopB from  Loopincre_B to loop_B

end

compound type globModel

  component TravelAgency  BAUC

connector SINGLE BAUC_createFlights( BAUC.createFlights)
connector SINGLE BAUC_addFlight( BAUC.addFlight)
connector SINGLE BAUC_additionCounterOne( BAUC.additionCounterOne)
connector SINGLE BAUC_finishcreateFlights( BAUC.finishcreateFlights)
connector SINGLE BAUC_SearchflightPRICE( BAUC.SearchflightPRICE)
connector SINGLE BAUC_guardSearchflightPRICE( BAUC.guardSearchflightPRICE)
connector SINGLE BAUC_DguardSearchflightPRICE( BAUC.DguardSearchflightPRICE)
connector SINGLE BAUC_startloopS( BAUC.startloopS)
connector SINGLE BAUC_loopconditionS( BAUC.loopconditionS)
connector SINGLE BAUC_DstartloopS( BAUC.DstartloopS)
connector SINGLE BAUC_ifconditionS( BAUC.ifconditionS)
connector SINGLE BAUC_DifconditionS( BAUC.DifconditionS)
connector SINGLE BAUC_loopincreS( BAUC.loopincreS)
connector SINGLE BAUC_backtoloopS( BAUC.backtoloopS)
connector SINGLE BAUC_ifconditionS1( BAUC.ifconditionS1)
connector SINGLE BAUC_DifconditionS1( BAUC.DifconditionS1)
connector SINGLE BAUC_RETURN( BAUC.RETURN)
connector SINGLE BAUC_getFlightbyID( BAUC.getFlightbyID)
connector SINGLE BAUC_guardfunctiongetFlightbyID( BAUC.guardfunctiongetFlightbyID)
connector SINGLE BAUC_DguardfunctiongetFlightbyID( BAUC.DguardfunctiongetFlightbyID)
connector SINGLE BAUC_startloopG( BAUC.startloopG)
connector SINGLE BAUC_DstartloopG( BAUC.DstartloopG)
connector SINGLE BAUC_loopincreG( BAUC.loopincreG)
connector SINGLE BAUC_backtoloopG( BAUC.backtoloopG)
connector SINGLE BAUC_ifconditionG( BAUC.ifconditionG)
connector SINGLE BAUC_DifconditionG( BAUC.DifconditionG)
connector SINGLE BAUC_BookFLIGHT( BAUC.BookFLIGHT)
connector SINGLE BAUC_guardBookFLIGHT( BAUC.guardBookFLIGHT)
connector SINGLE BAUC_DguardBookFLIGHT( BAUC.DguardBookFLIGHT)
connector SINGLE BAUC_loopconditionB( BAUC.loopconditionB)
connector SINGLE BAUC_DloopconditionB( BAUC.DloopconditionB)
connector SINGLE BAUC_ifconditionB( BAUC.ifconditionB)
connector SINGLE BAUC_DifconditionB( BAUC.DifconditionB)
connector SINGLE BAUC_loopincreB( BAUC.loopincreB)
connector SINGLE BAUC_backtoloopB( BAUC.backtoloopB)


end

component globModel Root
 end