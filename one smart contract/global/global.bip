model Model

	port type syncPort

 connector type SINGLE(syncPort p)
    define p
end

atomic type Global
data int amount
data int credit


export port syncPort kill
export port syncPort k1
export port syncPort k2
export port syncPort k3

export port syncPort withdrawallEther
export port syncPort a1
export port syncPort a2
export port syncPort a3
export port syncPort a4
export port syncPort a5
export port syncPort a6
export port syncPort a7


export port syncPort forward
export port syncPort f1
export port syncPort f2
export port syncPort f3
export port syncPort f4
export port syncPort f5
export port syncPort f6

export port syncPort withdraw
export port syncPort w1
export port syncPort w2
export port syncPort w3
export port syncPort w4
export port syncPort w5
export port syncPort w6
export port syncPort w7


  place    invoke , function_withdrawallEther, function_withdraw, function_kill, function_forward, sending_ether_transfer, requirecondition, txorigin, Dtxorigin, ifcondition, creditEqualGamount, creditDamount, sending_ether_call, subtraction, delegatecall, Ddelegatecall, selfdestruct, public

initial to invoke do {credit = 4; amount = 2;}

on kill from invoke to function_kill
on k1 from function_kill to public
on k2 from public to selfdestruct
on k3 from selfdestruct to invoke
  
on withdrawallEther from invoke to  function_withdrawallEther
on a1 from function_withdrawallEther to  public
on a2 from  public to requirecondition
on a3 from requirecondition to txorigin
on a4 from requirecondition to  Dtxorigin
on a5 from  Dtxorigin to invoke
on a6 from  txorigin to sending_ether_transfer
on a7 from sending_ether_transfer to invoke


on forward from invoke to  function_forward
on f1 from function_forward to public
on f2 from public to requirecondition
on f3 from requirecondition to delegatecall
on f4 from requirecondition to Ddelegatecall
on f5 from  delegatecall to invoke
on f6 from  Ddelegatecall to invoke

on withdraw from invoke to function_withdraw
on w1 from function_withdraw to public 
on w2 from public to ifcondition 
on w2 from ifcondition to creditEqualGamount provided ( credit >= amount)
on w3 from ifcondition to creditDamount provided ( credit < amount) 
on w7 from creditDamount to invoke
on w4 from creditEqualGamount to sending_ether_call
on w5 from sending_ether_call to subtraction do {credit = credit - amount;}
on w6 from subtraction to invoke
end




compound type globModel

  component Global BAUC
  
connector SINGLE BAUC_kill ( BAUC.kill )
connector SINGLE BAUC_k1 ( BAUC.k1 )
connector SINGLE BAUC_k2 ( BAUC.k2 )
connector SINGLE BAUC_k3 ( BAUC.k3 )

connector SINGLE BAUC_withdrawallEther ( BAUC.withdrawallEther )
connector SINGLE BAUC_a1 ( BAUC.a1 )
connector SINGLE BAUC_a2 ( BAUC.a2 )
connector SINGLE BAUC_a3 ( BAUC.a3 )
connector SINGLE BAUC_a4 ( BAUC.a4 )
connector SINGLE BAUC_a5 ( BAUC.a5 )
connector SINGLE BAUC_a6 ( BAUC.a6 )
connector SINGLE BAUC_a7 ( BAUC.a7 )

connector SINGLE BAUC_forward ( BAUC.forward )
connector SINGLE BAUC_f1 ( BAUC.f1 )
connector SINGLE BAUC_f2 ( BAUC.f2 )
connector SINGLE BAUC_f3 ( BAUC.f3 )
connector SINGLE BAUC_f4 ( BAUC.f4 )
connector SINGLE BAUC_f5 ( BAUC.f5 )
connector SINGLE BAUC_f6 ( BAUC.f6 )

connector SINGLE BAUC_withdraw ( BAUC.withdraw )
connector SINGLE BAUC_w1 ( BAUC.w1 )
connector SINGLE BAUC_w2 ( BAUC.w2 )
connector SINGLE BAUC_w3 ( BAUC.w3 )
connector SINGLE BAUC_w4 ( BAUC.w4 )
connector SINGLE BAUC_w5 ( BAUC.w5 )
connector SINGLE BAUC_w6 ( BAUC.w6 )
connector SINGLE BAUC_w7 ( BAUC.w7 )


  end

component globModel Root

 end