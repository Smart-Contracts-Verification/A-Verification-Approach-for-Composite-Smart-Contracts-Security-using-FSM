contract SimpleDAO {
  
     address public owner;
     uint public credit;



 function withdrawallEther (address _Recip) public {

      	  require(tx.origin == owner); //use Tx.origine for authentication 
       			
	 _ Recip.transfer(this.balance); }


 function withdraw (address _Recip, uint amount ) public {

     if (credit[owner]>= amount) { //reentracy vulnerability
      
     _Recip.call.value(amount)();
      credit[owner]-=amount;
    }



function forward(address  _Recip, bytes _data) public {
   
 require(callee.delegatecall(_data));  }}




function kill () public   (uint256) {
   selfdestruct(owner);} // selfdestruct vulnerability
  }


}